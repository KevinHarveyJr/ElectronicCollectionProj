@model Electronic_Collection.Models.Collector

@{ ViewData["Title"] = "Details"; }

<h1>Details</h1>

<div>
    <h4>Collector</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Console)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Console)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Game)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Game)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Genre)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Genre)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.GamingMoment)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.GamingMoment)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PicturePath)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PicturePath)
        </dd>
        @*<dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.IdentityUser)
            </dt>*@
        @*<dd class = "col-sm-10">
                @Html.DisplayFor(model => model.IdentityUser.Id)
            </dd>*@
    </dl>
</div>

<head>
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=@Electronic_Collection.PrivateAPIKeys.GoogleMapsAPIKey&callback=initAutocomplete&libraries=places&v=weekly"
        defer></script>
<style type="text/css">
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 100%;
    }

    /* Optional: Makes the sample page fill the window. */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }
</style>
<script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.
      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
      function initAutocomplete() {
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 29.7604, lng: -95.3698 },
          zoom: 12,
          mapTypeId: "roadmap",
        });
        // Create the search box and link it to the UI element.
        const input = document.getElementById("pac-input");
        const searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        // Bias the SearchBox results towards current map's viewport.
        map.addListener("bounds_changed", () => {
          searchBox.setBounds(map.getBounds());
        });
        let markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener("places_changed", () => {
          const places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }
          // Clear out the old markers.
          markers.forEach((marker) => {
            marker.setMap(null);
          });
          markers = [];
          // For each place, get the icon, name and location.
          const bounds = new google.maps.LatLngBounds();
          places.forEach((place) => {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            const icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25),
            };
            // Create a marker for each place.
            markers.push(
              new google.maps.Marker({
                map,
                icon,
                title: place.name,
                position: place.geometry.location,
              })
            );

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }
</script>
  </head>
<body>
    <input id="pac-input"
           class="controls"
           type="text"
           placeholder="Where Would You Like To Search?" />
    <div id="map"></div>
</body>
<div>
    <a type="button" asp-action="Edit" asp-route-id="@Model.CollectorId" class="btn btn-primary">Edit</a>
</div>

<a type="button" asp-action="GamesIndex" asp-controller="Items" class="btn btn-primary">Search for Games</a>
<a type="button" asp-action="PlatformIndex" asp-controller="Items" class="btn btn-primary">Search By Platform</a>
<a type="button" asp-action="Index" asp-controller="CollectionOBjs" class="btn btn-primary">Collector's Collection</a>
<a type="button" asp-action="Index" asp-controller="CollectorWishlists" class="btn btn-primary">Collector's Wishlist</a>
<a type="button" asp-action="Messages" asp-controller="Home" class="btn btn-primary">Messages</a>

